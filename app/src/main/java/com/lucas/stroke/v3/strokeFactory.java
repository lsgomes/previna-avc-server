package com.lucas.stroke.v3;

import com.lucas.stroke.v3.impl.*;


import java.util.Collection;

import org.protege.owl.codegeneration.CodeGenerationFactory;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.protege.owl.codegeneration.impl.FactoryHelper;
import org.protege.owl.codegeneration.impl.ProtegeJavaMapping;
import org.protege.owl.codegeneration.inference.CodeGenerationInference;
import org.protege.owl.codegeneration.inference.SimpleInference;

import org.semanticweb.owlapi.model.OWLClass;
import org.semanticweb.owlapi.model.OWLOntology;
import org.semanticweb.owlapi.model.OWLOntologyStorageException;

/**
 * A class that serves as the entry point to the generated code providing access
 * to existing individuals in the ontology and the ability to create new individuals in the ontology.<p>
 * 
 * Generated by Protege (http://protege.stanford.edu).<br>
 * Source Class: strokeFactory<br>
 * @version generated on Sun Mar 05 19:13:36 BRT 2017 by dossluca
 */
public class strokeFactory implements CodeGenerationFactory {
    private OWLOntology ontology;
    private ProtegeJavaMapping javaMapping = new ProtegeJavaMapping();
    private FactoryHelper delegate;
    private CodeGenerationInference inference;

    public strokeFactory(OWLOntology ontology) {
	    this(ontology, new SimpleInference(ontology));
    }
    
    public strokeFactory(OWLOntology ontology, CodeGenerationInference inference) {
        this.ontology = ontology;
        this.inference = inference;
        javaMapping.initialize(ontology, inference);
        delegate = new FactoryHelper(ontology, inference);
    }

    public OWLOntology getOwlOntology() {
        return ontology;
    }
    
    public void saveOwlOntology() throws OWLOntologyStorageException {
        ontology.getOWLOntologyManager().saveOntology(ontology);
    }
    
    public void flushOwlReasoner() {
        delegate.flushOwlReasoner();
    }
    
    public boolean canAs(WrappedIndividual resource, Class<? extends WrappedIndividual> javaInterface) {
    	return javaMapping.canAs(resource, javaInterface);
    }
    
    public  <X extends WrappedIndividual> X as(WrappedIndividual resource, Class<? extends X> javaInterface) {
    	return javaMapping.as(resource, javaInterface);
    }
    
    public Class<?> getJavaInterfaceFromOwlClass(OWLClass cls) {
        return javaMapping.getJavaInterfaceFromOwlClass(cls);
    }
    
    public OWLClass getOwlClassFromJavaInterface(Class<?> javaInterface) {
	    return javaMapping.getOwlClassFromJavaInterface(javaInterface);
    }
    
    public CodeGenerationInference getInference() {
        return inference;
    }

    /* ***************************************************
     * Class http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Abstain
     */

    {
        javaMapping.add("http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Abstain", Abstain.class, DefaultAbstain.class);
    }

    /**
     * Creates an instance of type Abstain.  Modifies the underlying ontology.
     */
    public Abstain createAbstain(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ABSTAIN, DefaultAbstain.class);
    }

    /**
     * Gets an instance of type Abstain with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Abstain getAbstain(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ABSTAIN, DefaultAbstain.class);
    }

    /**
     * Gets all instances of Abstain from the ontology.
     */
    public Collection<? extends Abstain> getAllAbstainInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ABSTAIN, DefaultAbstain.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Accelerometer
     */

    {
        javaMapping.add("http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Accelerometer", Accelerometer.class, DefaultAccelerometer.class);
    }

    /**
     * Creates an instance of type Accelerometer.  Modifies the underlying ontology.
     */
    public Accelerometer createAccelerometer(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ACCELEROMETER, DefaultAccelerometer.class);
    }

    /**
     * Gets an instance of type Accelerometer with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Accelerometer getAccelerometer(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ACCELEROMETER, DefaultAccelerometer.class);
    }

    /**
     * Gets all instances of Accelerometer from the ontology.
     */
    public Collection<? extends Accelerometer> getAllAccelerometerInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ACCELEROMETER, DefaultAccelerometer.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Active
     */

    {
        javaMapping.add("http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Active", Active.class, DefaultActive.class);
    }

    /**
     * Creates an instance of type Active.  Modifies the underlying ontology.
     */
    public Active createActive(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ACTIVE, DefaultActive.class);
    }

    /**
     * Gets an instance of type Active with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Active getActive(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ACTIVE, DefaultActive.class);
    }

    /**
     * Gets all instances of Active from the ontology.
     */
    public Collection<? extends Active> getAllActiveInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ACTIVE, DefaultActive.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Adverb
     */

    {
        javaMapping.add("http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Adverb", Adverb.class, DefaultAdverb.class);
    }

    /**
     * Creates an instance of type Adverb.  Modifies the underlying ontology.
     */
    public Adverb createAdverb(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ADVERB, DefaultAdverb.class);
    }

    /**
     * Gets an instance of type Adverb with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Adverb getAdverb(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ADVERB, DefaultAdverb.class);
    }

    /**
     * Gets all instances of Adverb from the ontology.
     */
    public Collection<? extends Adverb> getAllAdverbInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ADVERB, DefaultAdverb.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Alcohol_consumption
     */

    {
        javaMapping.add("http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Alcohol_consumption", Alcohol_consumption.class, DefaultAlcohol_consumption.class);
    }

    /**
     * Creates an instance of type Alcohol_consumption.  Modifies the underlying ontology.
     */
    public Alcohol_consumption createAlcohol_consumption(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ALCOHOL_CONSUMPTION, DefaultAlcohol_consumption.class);
    }

    /**
     * Gets an instance of type Alcohol_consumption with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Alcohol_consumption getAlcohol_consumption(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ALCOHOL_CONSUMPTION, DefaultAlcohol_consumption.class);
    }

    /**
     * Gets all instances of Alcohol_consumption from the ontology.
     */
    public Collection<? extends Alcohol_consumption> getAllAlcohol_consumptionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ALCOHOL_CONSUMPTION, DefaultAlcohol_consumption.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Ambient_light_sensor
     */

    {
        javaMapping.add("http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Ambient_light_sensor", Ambient_light_sensor.class, DefaultAmbient_light_sensor.class);
    }

    /**
     * Creates an instance of type Ambient_light_sensor.  Modifies the underlying ontology.
     */
    public Ambient_light_sensor createAmbient_light_sensor(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_AMBIENT_LIGHT_SENSOR, DefaultAmbient_light_sensor.class);
    }

    /**
     * Gets an instance of type Ambient_light_sensor with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Ambient_light_sensor getAmbient_light_sensor(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_AMBIENT_LIGHT_SENSOR, DefaultAmbient_light_sensor.class);
    }

    /**
     * Gets all instances of Ambient_light_sensor from the ontology.
     */
    public Collection<? extends Ambient_light_sensor> getAllAmbient_light_sensorInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_AMBIENT_LIGHT_SENSOR, DefaultAmbient_light_sensor.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Barometer
     */

    {
        javaMapping.add("http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Barometer", Barometer.class, DefaultBarometer.class);
    }

    /**
     * Creates an instance of type Barometer.  Modifies the underlying ontology.
     */
    public Barometer createBarometer(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BAROMETER, DefaultBarometer.class);
    }

    /**
     * Gets an instance of type Barometer with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Barometer getBarometer(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BAROMETER, DefaultBarometer.class);
    }

    /**
     * Gets all instances of Barometer from the ontology.
     */
    public Collection<? extends Barometer> getAllBarometerInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BAROMETER, DefaultBarometer.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#College_diploma
     */

    {
        javaMapping.add("http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#College_diploma", College_diploma.class, DefaultCollege_diploma.class);
    }

    /**
     * Creates an instance of type College_diploma.  Modifies the underlying ontology.
     */
    public College_diploma createCollege_diploma(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_COLLEGE_DIPLOMA, DefaultCollege_diploma.class);
    }

    /**
     * Gets an instance of type College_diploma with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public College_diploma getCollege_diploma(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_COLLEGE_DIPLOMA, DefaultCollege_diploma.class);
    }

    /**
     * Gets all instances of College_diploma from the ontology.
     */
    public Collection<? extends College_diploma> getAllCollege_diplomaInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_COLLEGE_DIPLOMA, DefaultCollege_diploma.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Congestive_heart_failure
     */

    {
        javaMapping.add("http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Congestive_heart_failure", Congestive_heart_failure.class, DefaultCongestive_heart_failure.class);
    }

    /**
     * Creates an instance of type Congestive_heart_failure.  Modifies the underlying ontology.
     */
    public Congestive_heart_failure createCongestive_heart_failure(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CONGESTIVE_HEART_FAILURE, DefaultCongestive_heart_failure.class);
    }

    /**
     * Gets an instance of type Congestive_heart_failure with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Congestive_heart_failure getCongestive_heart_failure(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CONGESTIVE_HEART_FAILURE, DefaultCongestive_heart_failure.class);
    }

    /**
     * Gets all instances of Congestive_heart_failure from the ontology.
     */
    public Collection<? extends Congestive_heart_failure> getAllCongestive_heart_failureInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CONGESTIVE_HEART_FAILURE, DefaultCongestive_heart_failure.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Critical_of_others
     */

    {
        javaMapping.add("http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Critical_of_others", Critical_of_others.class, DefaultCritical_of_others.class);
    }

    /**
     * Creates an instance of type Critical_of_others.  Modifies the underlying ontology.
     */
    public Critical_of_others createCritical_of_others(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CRITICAL_OF_OTHERS, DefaultCritical_of_others.class);
    }

    /**
     * Gets an instance of type Critical_of_others with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Critical_of_others getCritical_of_others(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CRITICAL_OF_OTHERS, DefaultCritical_of_others.class);
    }

    /**
     * Gets all instances of Critical_of_others from the ontology.
     */
    public Collection<? extends Critical_of_others> getAllCritical_of_othersInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CRITICAL_OF_OTHERS, DefaultCritical_of_others.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Cry_easily
     */

    {
        javaMapping.add("http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Cry_easily", Cry_easily.class, DefaultCry_easily.class);
    }

    /**
     * Creates an instance of type Cry_easily.  Modifies the underlying ontology.
     */
    public Cry_easily createCry_easily(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CRY_EASILY, DefaultCry_easily.class);
    }

    /**
     * Gets an instance of type Cry_easily with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Cry_easily getCry_easily(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CRY_EASILY, DefaultCry_easily.class);
    }

    /**
     * Gets all instances of Cry_easily from the ontology.
     */
    public Collection<? extends Cry_easily> getAllCry_easilyInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CRY_EASILY, DefaultCry_easily.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Device
     */

    {
        javaMapping.add("http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Device", Device.class, DefaultDevice.class);
    }

    /**
     * Creates an instance of type Device.  Modifies the underlying ontology.
     */
    public Device createDevice(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DEVICE, DefaultDevice.class);
    }

    /**
     * Gets an instance of type Device with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Device getDevice(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DEVICE, DefaultDevice.class);
    }

    /**
     * Gets all instances of Device from the ontology.
     */
    public Collection<? extends Device> getAllDeviceInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DEVICE, DefaultDevice.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Diabetes
     */

    {
        javaMapping.add("http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Diabetes", Diabetes.class, DefaultDiabetes.class);
    }

    /**
     * Creates an instance of type Diabetes.  Modifies the underlying ontology.
     */
    public Diabetes createDiabetes(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DIABETES, DefaultDiabetes.class);
    }

    /**
     * Gets an instance of type Diabetes with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Diabetes getDiabetes(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DIABETES, DefaultDiabetes.class);
    }

    /**
     * Gets all instances of Diabetes from the ontology.
     */
    public Collection<? extends Diabetes> getAllDiabetesInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DIABETES, DefaultDiabetes.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Drinker
     */

    {
        javaMapping.add("http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Drinker", Drinker.class, DefaultDrinker.class);
    }

    /**
     * Creates an instance of type Drinker.  Modifies the underlying ontology.
     */
    public Drinker createDrinker(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DRINKER, DefaultDrinker.class);
    }

    /**
     * Gets an instance of type Drinker with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Drinker getDrinker(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DRINKER, DefaultDrinker.class);
    }

    /**
     * Gets all instances of Drinker from the ontology.
     */
    public Collection<? extends Drinker> getAllDrinkerInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DRINKER, DefaultDrinker.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Drinks_per_week
     */

    {
        javaMapping.add("http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Drinks_per_week", Drinks_per_week.class, DefaultDrinks_per_week.class);
    }

    /**
     * Creates an instance of type Drinks_per_week.  Modifies the underlying ontology.
     */
    public Drinks_per_week createDrinks_per_week(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DRINKS_PER_WEEK, DefaultDrinks_per_week.class);
    }

    /**
     * Gets an instance of type Drinks_per_week with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Drinks_per_week getDrinks_per_week(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DRINKS_PER_WEEK, DefaultDrinks_per_week.class);
    }

    /**
     * Gets all instances of Drinks_per_week from the ontology.
     */
    public Collection<? extends Drinks_per_week> getAllDrinks_per_weekInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DRINKS_PER_WEEK, DefaultDrinks_per_week.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Education
     */

    {
        javaMapping.add("http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Education", Education.class, DefaultEducation.class);
    }

    /**
     * Creates an instance of type Education.  Modifies the underlying ontology.
     */
    public Education createEducation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_EDUCATION, DefaultEducation.class);
    }

    /**
     * Gets an instance of type Education with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Education getEducation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_EDUCATION, DefaultEducation.class);
    }

    /**
     * Gets all instances of Education from the ontology.
     */
    public Collection<? extends Education> getAllEducationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_EDUCATION, DefaultEducation.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Fearful
     */

    {
        javaMapping.add("http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Fearful", Fearful.class, DefaultFearful.class);
    }

    /**
     * Creates an instance of type Fearful.  Modifies the underlying ontology.
     */
    public Fearful createFearful(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FEARFUL, DefaultFearful.class);
    }

    /**
     * Gets an instance of type Fearful with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Fearful getFearful(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FEARFUL, DefaultFearful.class);
    }

    /**
     * Gets all instances of Fearful from the ontology.
     */
    public Collection<? extends Fearful> getAllFearfulInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FEARFUL, DefaultFearful.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Female
     */

    {
        javaMapping.add("http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Female", Female.class, DefaultFemale.class);
    }

    /**
     * Creates an instance of type Female.  Modifies the underlying ontology.
     */
    public Female createFemale(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FEMALE, DefaultFemale.class);
    }

    /**
     * Gets an instance of type Female with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Female getFemale(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FEMALE, DefaultFemale.class);
    }

    /**
     * Gets all instances of Female from the ontology.
     */
    public Collection<? extends Female> getAllFemaleInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FEMALE, DefaultFemale.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Fingerprint_sensor
     */

    {
        javaMapping.add("http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Fingerprint_sensor", Fingerprint_sensor.class, DefaultFingerprint_sensor.class);
    }

    /**
     * Creates an instance of type Fingerprint_sensor.  Modifies the underlying ontology.
     */
    public Fingerprint_sensor createFingerprint_sensor(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FINGERPRINT_SENSOR, DefaultFingerprint_sensor.class);
    }

    /**
     * Gets an instance of type Fingerprint_sensor with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Fingerprint_sensor getFingerprint_sensor(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FINGERPRINT_SENSOR, DefaultFingerprint_sensor.class);
    }

    /**
     * Gets all instances of Fingerprint_sensor from the ontology.
     */
    public Collection<? extends Fingerprint_sensor> getAllFingerprint_sensorInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FINGERPRINT_SENSOR, DefaultFingerprint_sensor.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Former_alcoholic
     */

    {
        javaMapping.add("http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Former_alcoholic", Former_alcoholic.class, DefaultFormer_alcoholic.class);
    }

    /**
     * Creates an instance of type Former_alcoholic.  Modifies the underlying ontology.
     */
    public Former_alcoholic createFormer_alcoholic(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FORMER_ALCOHOLIC, DefaultFormer_alcoholic.class);
    }

    /**
     * Gets an instance of type Former_alcoholic with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Former_alcoholic getFormer_alcoholic(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FORMER_ALCOHOLIC, DefaultFormer_alcoholic.class);
    }

    /**
     * Gets all instances of Former_alcoholic from the ontology.
     */
    public Collection<? extends Former_alcoholic> getAllFormer_alcoholicInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FORMER_ALCOHOLIC, DefaultFormer_alcoholic.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Former_smoker
     */

    {
        javaMapping.add("http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Former_smoker", Former_smoker.class, DefaultFormer_smoker.class);
    }

    /**
     * Creates an instance of type Former_smoker.  Modifies the underlying ontology.
     */
    public Former_smoker createFormer_smoker(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FORMER_SMOKER, DefaultFormer_smoker.class);
    }

    /**
     * Gets an instance of type Former_smoker with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Former_smoker getFormer_smoker(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FORMER_SMOKER, DefaultFormer_smoker.class);
    }

    /**
     * Gets all instances of Former_smoker from the ontology.
     */
    public Collection<? extends Former_smoker> getAllFormer_smokerInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FORMER_SMOKER, DefaultFormer_smoker.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Frequency
     */

    {
        javaMapping.add("http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Frequency", Frequency.class, DefaultFrequency.class);
    }

    /**
     * Creates an instance of type Frequency.  Modifies the underlying ontology.
     */
    public Frequency createFrequency(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FREQUENCY, DefaultFrequency.class);
    }

    /**
     * Gets an instance of type Frequency with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Frequency getFrequency(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FREQUENCY, DefaultFrequency.class);
    }

    /**
     * Gets all instances of Frequency from the ontology.
     */
    public Collection<? extends Frequency> getAllFrequencyInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FREQUENCY, DefaultFrequency.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Gyroscope
     */

    {
        javaMapping.add("http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Gyroscope", Gyroscope.class, DefaultGyroscope.class);
    }

    /**
     * Creates an instance of type Gyroscope.  Modifies the underlying ontology.
     */
    public Gyroscope createGyroscope(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_GYROSCOPE, DefaultGyroscope.class);
    }

    /**
     * Gets an instance of type Gyroscope with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Gyroscope getGyroscope(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_GYROSCOPE, DefaultGyroscope.class);
    }

    /**
     * Gets all instances of Gyroscope from the ontology.
     */
    public Collection<? extends Gyroscope> getAllGyroscopeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_GYROSCOPE, DefaultGyroscope.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Heart_disease
     */

    {
        javaMapping.add("http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Heart_disease", Heart_disease.class, DefaultHeart_disease.class);
    }

    /**
     * Creates an instance of type Heart_disease.  Modifies the underlying ontology.
     */
    public Heart_disease createHeart_disease(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HEART_DISEASE, DefaultHeart_disease.class);
    }

    /**
     * Gets an instance of type Heart_disease with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Heart_disease getHeart_disease(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HEART_DISEASE, DefaultHeart_disease.class);
    }

    /**
     * Gets all instances of Heart_disease from the ontology.
     */
    public Collection<? extends Heart_disease> getAllHeart_diseaseInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HEART_DISEASE, DefaultHeart_disease.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Heart_rate_sensor
     */

    {
        javaMapping.add("http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Heart_rate_sensor", Heart_rate_sensor.class, DefaultHeart_rate_sensor.class);
    }

    /**
     * Creates an instance of type Heart_rate_sensor.  Modifies the underlying ontology.
     */
    public Heart_rate_sensor createHeart_rate_sensor(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HEART_RATE_SENSOR, DefaultHeart_rate_sensor.class);
    }

    /**
     * Gets an instance of type Heart_rate_sensor with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Heart_rate_sensor getHeart_rate_sensor(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HEART_RATE_SENSOR, DefaultHeart_rate_sensor.class);
    }

    /**
     * Gets all instances of Heart_rate_sensor from the ontology.
     */
    public Collection<? extends Heart_rate_sensor> getAllHeart_rate_sensorInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HEART_RATE_SENSOR, DefaultHeart_rate_sensor.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#High_school_diploma_and_some_college
     */

    {
        javaMapping.add("http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#High_school_diploma_and_some_college", High_school_diploma_and_some_college.class, DefaultHigh_school_diploma_and_some_college.class);
    }

    /**
     * Creates an instance of type High_school_diploma_and_some_college.  Modifies the underlying ontology.
     */
    public High_school_diploma_and_some_college createHigh_school_diploma_and_some_college(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HIGH_SCHOOL_DIPLOMA_AND_SOME_COLLEGE, DefaultHigh_school_diploma_and_some_college.class);
    }

    /**
     * Gets an instance of type High_school_diploma_and_some_college with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public High_school_diploma_and_some_college getHigh_school_diploma_and_some_college(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HIGH_SCHOOL_DIPLOMA_AND_SOME_COLLEGE, DefaultHigh_school_diploma_and_some_college.class);
    }

    /**
     * Gets all instances of High_school_diploma_and_some_college from the ontology.
     */
    public Collection<? extends High_school_diploma_and_some_college> getAllHigh_school_diploma_and_some_collegeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HIGH_SCHOOL_DIPLOMA_AND_SOME_COLLEGE, DefaultHigh_school_diploma_and_some_college.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Hypertension
     */

    {
        javaMapping.add("http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Hypertension", Hypertension.class, DefaultHypertension.class);
    }

    /**
     * Creates an instance of type Hypertension.  Modifies the underlying ontology.
     */
    public Hypertension createHypertension(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HYPERTENSION, DefaultHypertension.class);
    }

    /**
     * Gets an instance of type Hypertension with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Hypertension getHypertension(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HYPERTENSION, DefaultHypertension.class);
    }

    /**
     * Gets all instances of Hypertension from the ontology.
     */
    public Collection<? extends Hypertension> getAllHypertensionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HYPERTENSION, DefaultHypertension.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Inactive
     */

    {
        javaMapping.add("http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Inactive", Inactive.class, DefaultInactive.class);
    }

    /**
     * Creates an instance of type Inactive.  Modifies the underlying ontology.
     */
    public Inactive createInactive(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_INACTIVE, DefaultInactive.class);
    }

    /**
     * Gets an instance of type Inactive with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Inactive getInactive(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_INACTIVE, DefaultInactive.class);
    }

    /**
     * Gets all instances of Inactive from the ontology.
     */
    public Collection<? extends Inactive> getAllInactiveInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_INACTIVE, DefaultInactive.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Ischemic_heart_disease
     */

    {
        javaMapping.add("http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Ischemic_heart_disease", Ischemic_heart_disease.class, DefaultIschemic_heart_disease.class);
    }

    /**
     * Creates an instance of type Ischemic_heart_disease.  Modifies the underlying ontology.
     */
    public Ischemic_heart_disease createIschemic_heart_disease(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ISCHEMIC_HEART_DISEASE, DefaultIschemic_heart_disease.class);
    }

    /**
     * Gets an instance of type Ischemic_heart_disease with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Ischemic_heart_disease getIschemic_heart_disease(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ISCHEMIC_HEART_DISEASE, DefaultIschemic_heart_disease.class);
    }

    /**
     * Gets all instances of Ischemic_heart_disease from the ontology.
     */
    public Collection<? extends Ischemic_heart_disease> getAllIschemic_heart_diseaseInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ISCHEMIC_HEART_DISEASE, DefaultIschemic_heart_disease.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Location_sensor
     */

    {
        javaMapping.add("http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Location_sensor", Location_sensor.class, DefaultLocation_sensor.class);
    }

    /**
     * Creates an instance of type Location_sensor.  Modifies the underlying ontology.
     */
    public Location_sensor createLocation_sensor(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LOCATION_SENSOR, DefaultLocation_sensor.class);
    }

    /**
     * Gets an instance of type Location_sensor with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Location_sensor getLocation_sensor(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LOCATION_SENSOR, DefaultLocation_sensor.class);
    }

    /**
     * Gets all instances of Location_sensor from the ontology.
     */
    public Collection<? extends Location_sensor> getAllLocation_sensorInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LOCATION_SENSOR, DefaultLocation_sensor.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Login
     */

    {
        javaMapping.add("http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Login", Login.class, DefaultLogin.class);
    }

    /**
     * Creates an instance of type Login.  Modifies the underlying ontology.
     */
    public Login createLogin(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LOGIN, DefaultLogin.class);
    }

    /**
     * Gets an instance of type Login with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Login getLogin(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LOGIN, DefaultLogin.class);
    }

    /**
     * Gets all instances of Login from the ontology.
     */
    public Collection<? extends Login> getAllLoginInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LOGIN, DefaultLogin.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Male
     */

    {
        javaMapping.add("http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Male", Male.class, DefaultMale.class);
    }

    /**
     * Creates an instance of type Male.  Modifies the underlying ontology.
     */
    public Male createMale(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MALE, DefaultMale.class);
    }

    /**
     * Gets an instance of type Male with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Male getMale(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MALE, DefaultMale.class);
    }

    /**
     * Gets all instances of Male from the ontology.
     */
    public Collection<? extends Male> getAllMaleInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MALE, DefaultMale.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Mobile_device
     */

    {
        javaMapping.add("http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Mobile_device", Mobile_device.class, DefaultMobile_device.class);
    }

    /**
     * Creates an instance of type Mobile_device.  Modifies the underlying ontology.
     */
    public Mobile_device createMobile_device(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MOBILE_DEVICE, DefaultMobile_device.class);
    }

    /**
     * Gets an instance of type Mobile_device with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Mobile_device getMobile_device(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MOBILE_DEVICE, DefaultMobile_device.class);
    }

    /**
     * Gets all instances of Mobile_device from the ontology.
     */
    public Collection<? extends Mobile_device> getAllMobile_deviceInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MOBILE_DEVICE, DefaultMobile_device.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Never_smoked
     */

    {
        javaMapping.add("http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Never_smoked", Never_smoked.class, DefaultNever_smoked.class);
    }

    /**
     * Creates an instance of type Never_smoked.  Modifies the underlying ontology.
     */
    public Never_smoked createNever_smoked(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_NEVER_SMOKED, DefaultNever_smoked.class);
    }

    /**
     * Gets an instance of type Never_smoked with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Never_smoked getNever_smoked(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_NEVER_SMOKED, DefaultNever_smoked.class);
    }

    /**
     * Gets all instances of Never_smoked from the ontology.
     */
    public Collection<? extends Never_smoked> getAllNever_smokedInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_NEVER_SMOKED, DefaultNever_smoked.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#No_high_school_diploma
     */

    {
        javaMapping.add("http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#No_high_school_diploma", No_high_school_diploma.class, DefaultNo_high_school_diploma.class);
    }

    /**
     * Creates an instance of type No_high_school_diploma.  Modifies the underlying ontology.
     */
    public No_high_school_diploma createNo_high_school_diploma(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_NO_HIGH_SCHOOL_DIPLOMA, DefaultNo_high_school_diploma.class);
    }

    /**
     * Gets an instance of type No_high_school_diploma with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public No_high_school_diploma getNo_high_school_diploma(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_NO_HIGH_SCHOOL_DIPLOMA, DefaultNo_high_school_diploma.class);
    }

    /**
     * Gets all instances of No_high_school_diploma from the ontology.
     */
    public Collection<? extends No_high_school_diploma> getAllNo_high_school_diplomaInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_NO_HIGH_SCHOOL_DIPLOMA, DefaultNo_high_school_diploma.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Often_or_always
     */

    {
        javaMapping.add("http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Often_or_always", Often_or_always.class, DefaultOften_or_always.class);
    }

    /**
     * Creates an instance of type Often_or_always.  Modifies the underlying ontology.
     */
    public Often_or_always createOften_or_always(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_OFTEN_OR_ALWAYS, DefaultOften_or_always.class);
    }

    /**
     * Gets an instance of type Often_or_always with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Often_or_always getOften_or_always(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_OFTEN_OR_ALWAYS, DefaultOften_or_always.class);
    }

    /**
     * Gets all instances of Often_or_always from the ontology.
     */
    public Collection<? extends Often_or_always> getAllOften_or_alwaysInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_OFTEN_OR_ALWAYS, DefaultOften_or_always.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#One_or_two_times_per_week
     */

    {
        javaMapping.add("http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#One_or_two_times_per_week", One_or_two_times_per_week.class, DefaultOne_or_two_times_per_week.class);
    }

    /**
     * Creates an instance of type One_or_two_times_per_week.  Modifies the underlying ontology.
     */
    public One_or_two_times_per_week createOne_or_two_times_per_week(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ONE_OR_TWO_TIMES_PER_WEEK, DefaultOne_or_two_times_per_week.class);
    }

    /**
     * Gets an instance of type One_or_two_times_per_week with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public One_or_two_times_per_week getOne_or_two_times_per_week(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ONE_OR_TWO_TIMES_PER_WEEK, DefaultOne_or_two_times_per_week.class);
    }

    /**
     * Gets all instances of One_or_two_times_per_week from the ontology.
     */
    public Collection<? extends One_or_two_times_per_week> getAllOne_or_two_times_per_weekInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ONE_OR_TWO_TIMES_PER_WEEK, DefaultOne_or_two_times_per_week.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#One_to_six_drinks_per_week
     */

    {
        javaMapping.add("http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#One_to_six_drinks_per_week", One_to_six_drinks_per_week.class, DefaultOne_to_six_drinks_per_week.class);
    }

    /**
     * Creates an instance of type One_to_six_drinks_per_week.  Modifies the underlying ontology.
     */
    public One_to_six_drinks_per_week createOne_to_six_drinks_per_week(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ONE_TO_SIX_DRINKS_PER_WEEK, DefaultOne_to_six_drinks_per_week.class);
    }

    /**
     * Gets an instance of type One_to_six_drinks_per_week with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public One_to_six_drinks_per_week getOne_to_six_drinks_per_week(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ONE_TO_SIX_DRINKS_PER_WEEK, DefaultOne_to_six_drinks_per_week.class);
    }

    /**
     * Gets all instances of One_to_six_drinks_per_week from the ontology.
     */
    public Collection<? extends One_to_six_drinks_per_week> getAllOne_to_six_drinks_per_weekInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ONE_TO_SIX_DRINKS_PER_WEEK, DefaultOne_to_six_drinks_per_week.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Peripheral_arterial_disease
     */

    {
        javaMapping.add("http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Peripheral_arterial_disease", Peripheral_arterial_disease.class, DefaultPeripheral_arterial_disease.class);
    }

    /**
     * Creates an instance of type Peripheral_arterial_disease.  Modifies the underlying ontology.
     */
    public Peripheral_arterial_disease createPeripheral_arterial_disease(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PERIPHERAL_ARTERIAL_DISEASE, DefaultPeripheral_arterial_disease.class);
    }

    /**
     * Gets an instance of type Peripheral_arterial_disease with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Peripheral_arterial_disease getPeripheral_arterial_disease(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PERIPHERAL_ARTERIAL_DISEASE, DefaultPeripheral_arterial_disease.class);
    }

    /**
     * Gets all instances of Peripheral_arterial_disease from the ontology.
     */
    public Collection<? extends Peripheral_arterial_disease> getAllPeripheral_arterial_diseaseInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PERIPHERAL_ARTERIAL_DISEASE, DefaultPeripheral_arterial_disease.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Person
     */

    {
        javaMapping.add("http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Person", Person.class, DefaultPerson.class);
    }

    /**
     * Creates an instance of type Person.  Modifies the underlying ontology.
     */
    public Person createPerson(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PERSON, DefaultPerson.class);
    }

    /**
     * Gets an instance of type Person with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Person getPerson(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PERSON, DefaultPerson.class);
    }

    /**
     * Gets all instances of Person from the ontology.
     */
    public Collection<? extends Person> getAllPersonInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PERSON, DefaultPerson.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Physical_activity
     */

    {
        javaMapping.add("http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Physical_activity", Physical_activity.class, DefaultPhysical_activity.class);
    }

    /**
     * Creates an instance of type Physical_activity.  Modifies the underlying ontology.
     */
    public Physical_activity createPhysical_activity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PHYSICAL_ACTIVITY, DefaultPhysical_activity.class);
    }

    /**
     * Gets an instance of type Physical_activity with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Physical_activity getPhysical_activity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PHYSICAL_ACTIVITY, DefaultPhysical_activity.class);
    }

    /**
     * Gets all instances of Physical_activity from the ontology.
     */
    public Collection<? extends Physical_activity> getAllPhysical_activityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PHYSICAL_ACTIVITY, DefaultPhysical_activity.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Proximity_sensor
     */

    {
        javaMapping.add("http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Proximity_sensor", Proximity_sensor.class, DefaultProximity_sensor.class);
    }

    /**
     * Creates an instance of type Proximity_sensor.  Modifies the underlying ontology.
     */
    public Proximity_sensor createProximity_sensor(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PROXIMITY_SENSOR, DefaultProximity_sensor.class);
    }

    /**
     * Gets an instance of type Proximity_sensor with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Proximity_sensor getProximity_sensor(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PROXIMITY_SENSOR, DefaultProximity_sensor.class);
    }

    /**
     * Gets all instances of Proximity_sensor from the ontology.
     */
    public Collection<? extends Proximity_sensor> getAllProximity_sensorInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PROXIMITY_SENSOR, DefaultProximity_sensor.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Psychosocial_factors
     */

    {
        javaMapping.add("http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Psychosocial_factors", Psychosocial_factors.class, DefaultPsychosocial_factors.class);
    }

    /**
     * Creates an instance of type Psychosocial_factors.  Modifies the underlying ontology.
     */
    public Psychosocial_factors createPsychosocial_factors(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PSYCHOSOCIAL_FACTORS, DefaultPsychosocial_factors.class);
    }

    /**
     * Gets an instance of type Psychosocial_factors with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Psychosocial_factors getPsychosocial_factors(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PSYCHOSOCIAL_FACTORS, DefaultPsychosocial_factors.class);
    }

    /**
     * Gets all instances of Psychosocial_factors from the ontology.
     */
    public Collection<? extends Psychosocial_factors> getAllPsychosocial_factorsInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PSYCHOSOCIAL_FACTORS, DefaultPsychosocial_factors.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Renal_disease
     */

    {
        javaMapping.add("http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Renal_disease", Renal_disease.class, DefaultRenal_disease.class);
    }

    /**
     * Creates an instance of type Renal_disease.  Modifies the underlying ontology.
     */
    public Renal_disease createRenal_disease(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_RENAL_DISEASE, DefaultRenal_disease.class);
    }

    /**
     * Gets an instance of type Renal_disease with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Renal_disease getRenal_disease(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_RENAL_DISEASE, DefaultRenal_disease.class);
    }

    /**
     * Gets all instances of Renal_disease from the ontology.
     */
    public Collection<? extends Renal_disease> getAllRenal_diseaseInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_RENAL_DISEASE, DefaultRenal_disease.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#RiskFactor
     */

    {
        javaMapping.add("http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#RiskFactor", RiskFactor.class, DefaultRiskFactor.class);
    }

    /**
     * Creates an instance of type RiskFactor.  Modifies the underlying ontology.
     */
    public RiskFactor createRiskFactor(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_RISKFACTOR, DefaultRiskFactor.class);
    }

    /**
     * Gets an instance of type RiskFactor with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public RiskFactor getRiskFactor(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_RISKFACTOR, DefaultRiskFactor.class);
    }

    /**
     * Gets all instances of RiskFactor from the ontology.
     */
    public Collection<? extends RiskFactor> getAllRiskFactorInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_RISKFACTOR, DefaultRiskFactor.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Sensor
     */

    {
        javaMapping.add("http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Sensor", Sensor.class, DefaultSensor.class);
    }

    /**
     * Creates an instance of type Sensor.  Modifies the underlying ontology.
     */
    public Sensor createSensor(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SENSOR, DefaultSensor.class);
    }

    /**
     * Gets an instance of type Sensor with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Sensor getSensor(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SENSOR, DefaultSensor.class);
    }

    /**
     * Gets all instances of Sensor from the ontology.
     */
    public Collection<? extends Sensor> getAllSensorInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SENSOR, DefaultSensor.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Seven_or_more_drinks_per_week
     */

    {
        javaMapping.add("http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Seven_or_more_drinks_per_week", Seven_or_more_drinks_per_week.class, DefaultSeven_or_more_drinks_per_week.class);
    }

    /**
     * Creates an instance of type Seven_or_more_drinks_per_week.  Modifies the underlying ontology.
     */
    public Seven_or_more_drinks_per_week createSeven_or_more_drinks_per_week(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SEVEN_OR_MORE_DRINKS_PER_WEEK, DefaultSeven_or_more_drinks_per_week.class);
    }

    /**
     * Gets an instance of type Seven_or_more_drinks_per_week with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Seven_or_more_drinks_per_week getSeven_or_more_drinks_per_week(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SEVEN_OR_MORE_DRINKS_PER_WEEK, DefaultSeven_or_more_drinks_per_week.class);
    }

    /**
     * Gets all instances of Seven_or_more_drinks_per_week from the ontology.
     */
    public Collection<? extends Seven_or_more_drinks_per_week> getAllSeven_or_more_drinks_per_weekInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SEVEN_OR_MORE_DRINKS_PER_WEEK, DefaultSeven_or_more_drinks_per_week.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Sex
     */

    {
        javaMapping.add("http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Sex", Sex.class, DefaultSex.class);
    }

    /**
     * Creates an instance of type Sex.  Modifies the underlying ontology.
     */
    public Sex createSex(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SEX, DefaultSex.class);
    }

    /**
     * Gets an instance of type Sex with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Sex getSex(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SEX, DefaultSex.class);
    }

    /**
     * Gets all instances of Sex from the ontology.
     */
    public Collection<? extends Sex> getAllSexInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SEX, DefaultSex.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Smoker
     */

    {
        javaMapping.add("http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Smoker", Smoker.class, DefaultSmoker.class);
    }

    /**
     * Creates an instance of type Smoker.  Modifies the underlying ontology.
     */
    public Smoker createSmoker(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SMOKER, DefaultSmoker.class);
    }

    /**
     * Gets an instance of type Smoker with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Smoker getSmoker(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SMOKER, DefaultSmoker.class);
    }

    /**
     * Gets all instances of Smoker from the ontology.
     */
    public Collection<? extends Smoker> getAllSmokerInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SMOKER, DefaultSmoker.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Smoking_status
     */

    {
        javaMapping.add("http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Smoking_status", Smoking_status.class, DefaultSmoking_status.class);
    }

    /**
     * Creates an instance of type Smoking_status.  Modifies the underlying ontology.
     */
    public Smoking_status createSmoking_status(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SMOKING_STATUS, DefaultSmoking_status.class);
    }

    /**
     * Gets an instance of type Smoking_status with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Smoking_status getSmoking_status(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SMOKING_STATUS, DefaultSmoking_status.class);
    }

    /**
     * Gets all instances of Smoking_status from the ontology.
     */
    public Collection<? extends Smoking_status> getAllSmoking_statusInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SMOKING_STATUS, DefaultSmoking_status.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Sometimes_or_never
     */

    {
        javaMapping.add("http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Sometimes_or_never", Sometimes_or_never.class, DefaultSometimes_or_never.class);
    }

    /**
     * Creates an instance of type Sometimes_or_never.  Modifies the underlying ontology.
     */
    public Sometimes_or_never createSometimes_or_never(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SOMETIMES_OR_NEVER, DefaultSometimes_or_never.class);
    }

    /**
     * Gets an instance of type Sometimes_or_never with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Sometimes_or_never getSometimes_or_never(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SOMETIMES_OR_NEVER, DefaultSometimes_or_never.class);
    }

    /**
     * Gets all instances of Sometimes_or_never from the ontology.
     */
    public Collection<? extends Sometimes_or_never> getAllSometimes_or_neverInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SOMETIMES_OR_NEVER, DefaultSometimes_or_never.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Thing
     */

    {
        javaMapping.add("http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Thing", Thing.class, DefaultThing.class);
    }

    /**
     * Creates an instance of type Thing.  Modifies the underlying ontology.
     */
    public Thing createThing(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_THING, DefaultThing.class);
    }

    /**
     * Gets an instance of type Thing with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Thing getThing(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_THING, DefaultThing.class);
    }

    /**
     * Gets all instances of Thing from the ontology.
     */
    public Collection<? extends Thing> getAllThingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_THING, DefaultThing.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Three_or_more_times_per_week
     */

    {
        javaMapping.add("http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Three_or_more_times_per_week", Three_or_more_times_per_week.class, DefaultThree_or_more_times_per_week.class);
    }

    /**
     * Creates an instance of type Three_or_more_times_per_week.  Modifies the underlying ontology.
     */
    public Three_or_more_times_per_week createThree_or_more_times_per_week(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_THREE_OR_MORE_TIMES_PER_WEEK, DefaultThree_or_more_times_per_week.class);
    }

    /**
     * Gets an instance of type Three_or_more_times_per_week with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Three_or_more_times_per_week getThree_or_more_times_per_week(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_THREE_OR_MORE_TIMES_PER_WEEK, DefaultThree_or_more_times_per_week.class);
    }

    /**
     * Gets all instances of Three_or_more_times_per_week from the ontology.
     */
    public Collection<? extends Three_or_more_times_per_week> getAllThree_or_more_times_per_weekInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_THREE_OR_MORE_TIMES_PER_WEEK, DefaultThree_or_more_times_per_week.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Times_per_week
     */

    {
        javaMapping.add("http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Times_per_week", Times_per_week.class, DefaultTimes_per_week.class);
    }

    /**
     * Creates an instance of type Times_per_week.  Modifies the underlying ontology.
     */
    public Times_per_week createTimes_per_week(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TIMES_PER_WEEK, DefaultTimes_per_week.class);
    }

    /**
     * Gets an instance of type Times_per_week with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Times_per_week getTimes_per_week(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TIMES_PER_WEEK, DefaultTimes_per_week.class);
    }

    /**
     * Gets all instances of Times_per_week from the ontology.
     */
    public Collection<? extends Times_per_week> getAllTimes_per_weekInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TIMES_PER_WEEK, DefaultTimes_per_week.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Wearable
     */

    {
        javaMapping.add("http://www.semanticweb.org/lucas/ontologies/2016/9/stroke#Wearable", Wearable.class, DefaultWearable.class);
    }

    /**
     * Creates an instance of type Wearable.  Modifies the underlying ontology.
     */
    public Wearable createWearable(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_WEARABLE, DefaultWearable.class);
    }

    /**
     * Gets an instance of type Wearable with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Wearable getWearable(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_WEARABLE, DefaultWearable.class);
    }

    /**
     * Gets all instances of Wearable from the ontology.
     */
    public Collection<? extends Wearable> getAllWearableInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_WEARABLE, DefaultWearable.class);
    }


}
